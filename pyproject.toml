[tool.poetry]
name = "colino-backend"
version = "0.1.0"
description = "AWS Lambda functions for Google YouTube OAuth authentication proxy"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.13"
google-auth = "^2.23.0"
google-auth-oauthlib = "^1.1.0"
google-auth-httplib2 = "^0.2.0"
google-api-python-client = "^2.100.0"
boto3 = "^1.40.25"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.2"
pytest-cov = "^7.0.0"
mypy = "^1.5.0"
bandit = "^1.8.6"
safety = "^3.6.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.9"
warn_unused_configs = true
# Disable warn_return_any for Lambda functions that return API Gateway responses

# Allow missing imports for Lambda runtime packages and shared modules
[[tool.mypy.overrides]]
module = [
    "google_auth_oauthlib.*",
    "google.auth.*",
    "googleapiclient.*",
    "boto3.*",
    "botocore.*",
    "requests.*",
    "shared.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
# Same as Black's default line length
line-length = 88
target-version = "py39"

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".aws-sam",
    "package",
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

# Ignore specific rules that conflict with Black or are too strict
ignore = [
    "E203", # whitespace before ':'
]

[tool.ruff.lint.isort]
known-first-party = ["src", "shared"]

[tool.ruff.format]
# Use single quotes instead of double quotes
quote-style = "double"
# Respect magic trailing commas
skip-magic-trailing-comma = false
